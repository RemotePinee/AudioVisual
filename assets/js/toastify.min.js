/*!
 * Toastify js 1.12.0
 * https://github.com/apvarun/toastify-js
 * @license MIT licensed
 */
(function(root, factory) {
  if (typeof module === "object" && module.exports) {
    module.exports = factory();
  } else {
    root.Toastify = factory();
  }
})(this, function(global) {
  var Toastify = function(options) {
      return new Toastify.lib.init(options);
    },
    version = "1.12.0";
  Toastify.lib = Toastify.prototype = {
    toastify: version,
    constructor: Toastify,
    init: function(options) {
      if (!options) {
        options = {};
      }
      this.options = {};
      this.toastElement = null;
      this.options.text = options.text || "Hi there!";
      this.options.node = options.node;
      this.options.duration = options.duration === 0 ? 0 : options.duration || 3000;
      this.options.selector = options.selector;
      this.options.callback = options.callback || function() {};
      this.options.destination = options.destination;
      this.options.newWindow = options.newWindow || false;
      this.options.close = options.close || false;
      this.options.gravity = options.gravity === "bottom" ? "toastify-bottom" : "toastify-top";
      this.options.positionLeft = options.positionLeft || false;
      this.options.position = options.position || "";
      this.options.backgroundColor = options.backgroundColor;
      this.options.avatar = options.avatar || "";
      this.options.className = options.className || "";
      this.options.stopOnFocus = options.stopOnFocus === undefined ? true : options.stopOnFocus;
      this.options.onClick = options.onClick;
      this.options.offset = options.offset || { x: 0, y: 0 };
      this.options.escapeMarkup = options.escapeMarkup === undefined ? true : options.escapeMarkup;
      this.options.ariaLive = options.ariaLive || "polite";
      this.options.style = options.style || {};
      if (options.backgroundColor) {
        console.warn(
          "DEPRECATION NOTICE: `backgroundColor` is being deprecated. Please use the `style.background` property."
        );
      }
      this.create();
      return this;
    },
    create: function() {
      var toastElement = document.createElement("div");
      toastElement.className = "toastify on " + this.options.className;
      if (this.options.position) {
        toastElement.className += " toastify-" + this.options.position;
      } else {
        if (this.options.positionLeft === true) {
          toastElement.className += " toastify-left";
          console.warn(
            "DEPRECATION NOTICE: `positionLeft` is being deprecated. Please use `position: 'left'` instead."
          );
        } else {
          toastElement.className += " toastify-right";
        }
      }
      toastElement.className += " " + this.options.gravity;
      if (this.options.backgroundColor) {
        console.warn(
          "DEPRECATION NOTICE: `backgroundColor` is being deprecated. Please use the `style.background` property."
        );
      }
      for (var property in this.options.style) {
        toastElement.style[property] = this.options.style[property];
      }
      toastElement.setAttribute("aria-live", this.options.ariaLive);
      if (this.options.node && this.options.node.nodeType === 1) {
        toastElement.appendChild(this.options.node);
      } else {
        if (this.options.escapeMarkup) {
          toastElement.innerText = this.options.text;
        } else {
          toastElement.innerHTML = this.options.text;
        }
        if (this.options.avatar !== "") {
          var avatarElement = document.createElement("img");
          avatarElement.src = this.options.avatar;
          avatarElement.className = "toastify-avatar";
          if (this.options.position === "left" || this.options.positionLeft === true) {
            toastElement.insertAdjacentElement("afterbegin", avatarElement);
          } else {
            toastElement.insertAdjacentElement("beforeend", avatarElement);
          }
        }
      }
      if (this.options.close === true) {
        var closeElement = document.createElement("button");
        closeElement.type = "button";
        closeElement.setAttribute("aria-label", "Close");
        closeElement.className = "toastify-close";
        closeElement.innerHTML = "&#10006;";
        closeElement.addEventListener(
          "click",
          function(event) {
            event.stopPropagation();
            this.removeElement(this.toastElement);
            window.clearTimeout(this.toastElement.timeOutValue);
          }.bind(this)
        );
        var width = window.innerWidth > 0 ? window.innerWidth : screen.width;
        if ((this.options.position === "left" || this.options.positionLeft === true) && width > 360) {
          toastElement.insertAdjacentElement("afterbegin", closeElement);
        } else {
          toastElement.appendChild(closeElement);
        }
      }
      if (this.options.stopOnFocus && this.options.duration > 0) {
        var self = this;
        toastElement.addEventListener("mouseover", function(event) {
          window.clearTimeout(toastElement.timeOutValue);
        });
        toastElement.addEventListener("mouseleave", function() {
          toastElement.timeOutValue = window.setTimeout(function() {
            self.removeElement(toastElement);
          }, self.options.duration);
        });
      }
      if (typeof this.options.onClick === "function") {
        var self = this;
        toastElement.addEventListener(
          "click",
          function(event) {
            self.options.onClick(event);
          }.bind(this)
        );
      }
      if (typeof this.options.destination === "string") {
        toastElement.addEventListener(
          "click",
          function(event) {
            event.stopPropagation();
            if (this.options.newWindow === true) {
              window.open(this.options.destination, "_blank");
            } else {
              window.location = this.options.destination;
            }
          }.bind(this)
        );
      }
      this.toastElement = toastElement;
    },
    showToast: function() {
      var R = document.getElementById(this.options.selector);
      if (!R) {
        if (this.options.selector) {
          console.warn("`selector` is not a valid ID. Considering `document.body` as the container.");
        }
        R = document.body;
      }
      var C = R.getBoundingClientRect();
      var L = this.toastElement.getBoundingClientRect();
      var P = {
        x: this.options.offset.x,
        y: this.options.offset.y,
      };
      var S;
      switch (this.options.gravity) {
        case "toastify-top":
          S = {
            top: "".concat(C.top + P.y, "px"),
            bottom: "",
          };
          break;
        case "toastify-bottom":
          S = {
            top: "",
            bottom: "-".concat(C.bottom - P.y, "px"),
          };
          break;
      }
      for (var property in S) {
        this.toastElement.style[property] = S[property];
      }
      R.appendChild(this.toastElement);
      var self = this;
      this.toastElement.timeOutValue = window.setTimeout(function() {
        self.removeElement(self.toastElement);
      }, this.options.duration);
    },
    hideToast: function() {
      if (this.toastElement.timeOutValue) {
        clearTimeout(this.toastElement.timeOutValue);
      }
      this.removeElement(this.toastElement);
    },
    removeElement: function(toastElement) {
      toastElement.className = toastElement.className.replace(" on", "");
      window.setTimeout(
        function() {
          if (toastElement.parentNode) {
            toastElement.parentNode.removeChild(toastElement);
          }
          this.options.callback.call(toastElement);
        }.bind(this),
        200
      );
    },
  };
  Toastify.lib.init.prototype = Toastify.lib;
  return Toastify;
});